const { jsPDF } = require('jspdf');
const moment = require('moment');
const logger = require('../utils/logger');

class ReportGenerationService {
  constructor() {
    this.pageHeight = 297; // A4 height in mm
    this.pageWidth = 210;  // A4 width in mm
    this.margin = 20;
    this.lineHeight = 6;
    this.currentY = this.margin;
  }

  async generateValidationReport(document) {
    try {
      logger.info(`Generating validation report for document: ${document.originalName}`);
      
      const pdf = new jsPDF();
      this.currentY = this.margin;
      
      // Header
      this.addHeader(pdf, document);
      
      // Document Information
      this.addDocumentInfo(pdf, document);
      
      // Validation Summary
      this.addValidationSummary(pdf, document);
      
      // Detailed Results
      this.addDetailedResults(pdf, document);
      
      // Footer
      this.addFooter(pdf);
      
      const buffer = Buffer.from(pdf.output('arraybuffer'));
      
      logger.info(`Validation report generated successfully for: ${document.originalName}`);
      return buffer;
      
    } catch (error) {
      logger.error('Report generation error:', error);
      throw new Error('Failed to generate validation report');
    }
  }

  addHeader(pdf, document) {
    // Title
    pdf.setFontSize(20);
    pdf.setFont(undefined, 'bold');
    pdf.text('Say Goodbye - POA Validation Report', this.margin, this.currentY);
    this.currentY += 15;
    
    // Company info
    pdf.setFontSize(10);
    pdf.setFont(undefined, 'normal');
    pdf.text('Generated by Say Goodbye', this.margin, this.currentY);
    this.currentY += 5;
    pdf.text(`Report Date: ${moment().format('MMMM DD, YYYY')}`, this.margin, this.currentY);
    this.currentY += 10;
    
    // Divider line
    pdf.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY);
    this.currentY += 10;
  }

  addDocumentInfo(pdf, document) {
    // Section title
    pdf.setFontSize(14);
    pdf.setFont(undefined, 'bold');
    pdf.text('Document Information', this.margin, this.currentY);
    this.currentY += 8;
    
    pdf.setFontSize(10);
    pdf.setFont(undefined, 'normal');
    
    const info = [
      `Document Name: ${document.originalName}`,
      `Upload Date: ${moment(document.createdAt).format('MMMM DD, YYYY hh:mm A')}`,
      `File Size: ${(document.fileSize / 1024 / 1024).toFixed(2)} MB`,
      `Processing Time: ${document.processingTime ? (document.processingTime / 1000).toFixed(2) + ' seconds' : 'N/A'}`,
      `OCR Confidence: ${document.ocrConfidence || 'N/A'}%`
    ];
    
    if (document.caseId) {
      info.push(`Case ID: ${document.caseId}`);
    }
    
    info.forEach(line => {
      pdf.text(line, this.margin, this.currentY);
      this.currentY += this.lineHeight;
    });
    
    this.currentY += 5;
  }

  addValidationSummary(pdf, document) {
    // Section title
    pdf.setFontSize(14);
    pdf.setFont(undefined, 'bold');
    pdf.text('Validation Summary', this.margin, this.currentY);
    this.currentY += 8;
    
    const results = document.validationResults;
    const summary = document.validationSummary;
    
    if (!results) {
      pdf.setFontSize(10);
      pdf.text('No validation results available', this.margin, this.currentY);
      this.currentY += 10;
      return;
    }
    
    // Overall status
    pdf.setFontSize(12);
    pdf.setFont(undefined, 'bold');
    const overallStatus = results.overall || 'Unknown';
    const statusColor = this.getStatusColor(overallStatus);
    pdf.setTextColor(statusColor.r, statusColor.g, statusColor.b);
    pdf.text(`Overall Status: ${overallStatus.toUpperCase()}`, this.margin, this.currentY);
    pdf.setTextColor(0, 0, 0); // Reset to black
    this.currentY += 10;
    
    // Summary statistics
    if (summary) {
      pdf.setFontSize(10);
      pdf.setFont(undefined, 'normal');
      pdf.text(`Total Checks: ${summary.total}`, this.margin, this.currentY);
      this.currentY += this.lineHeight;
      pdf.text(`Passed: ${summary.passed}`, this.margin, this.currentY);
      this.currentY += this.lineHeight;
      pdf.text(`Failed: ${summary.failed}`, this.margin, this.currentY);
      this.currentY += this.lineHeight;
      pdf.text(`Warnings: ${summary.warnings}`, this.margin, this.currentY);
      this.currentY += 10;
    }
  }

  addDetailedResults(pdf, document) {
    const results = document.validationResults;
    
    if (!results) return;
    
    // Notary Validation
    this.addValidationSection(pdf, 'Notary Validation', results.notaryValidation);
    
    // Witness Validation
    this.addValidationSection(pdf, 'Witness Validation', results.witnessValidation);
    
    // Verbiage Validation
    this.addValidationSection(pdf, 'Verbiage Validation', results.verbiageValidation);
    
    // Additional Checks
    if (results.additionalChecks) {
      this.addValidationSection(pdf, 'Date Validation', results.additionalChecks.dateValidation);
      this.addValidationSection(pdf, 'Signature Validation', results.additionalChecks.signatureValidation);
    }
  }

  addValidationSection(pdf, title, validation) {
    if (!validation) return;
    
    // Check if we need a new page
    if (this.currentY > this.pageHeight - 50) {
      pdf.addPage();
      this.currentY = this.margin;
    }
    
    // Section title
    pdf.setFontSize(12);
    pdf.setFont(undefined, 'bold');
    pdf.text(title, this.margin, this.currentY);
    this.currentY += 8;
    
    // Status
    pdf.setFontSize(10);
    pdf.setFont(undefined, 'bold');
    const statusColor = this.getStatusColor(validation.status);
    pdf.setTextColor(statusColor.r, statusColor.g, statusColor.b);
    pdf.text(`Status: ${validation.status?.toUpperCase() || 'UNKNOWN'}`, this.margin + 5, this.currentY);
    pdf.setTextColor(0, 0, 0); // Reset to black
    this.currentY += 6;
    
    pdf.setFont(undefined, 'normal');
    
    // Specific details based on validation type
    if (validation.notaryName) {
      pdf.text(`Notary Name: ${validation.notaryName}`, this.margin + 5, this.currentY);
      this.currentY += this.lineHeight;
    }
    
    if (validation.commissionNumber) {
      pdf.text(`Commission Number: ${validation.commissionNumber}`, this.margin + 5, this.currentY);
      this.currentY += this.lineHeight;
    }
    
    if (validation.commissionExpiry) {
      pdf.text(`Commission Expires: ${moment(validation.commissionExpiry).format('MM/DD/YYYY')}`, this.margin + 5, this.currentY);
      this.currentY += this.lineHeight;
    }
    
    if (validation.witnessCount !== undefined) {
      pdf.text(`Witnesses Found: ${validation.witnessCount}`, this.margin + 5, this.currentY);
      this.currentY += this.lineHeight;
    }
    
    if (validation.hasCremationAuthority !== undefined) {
      pdf.text(`Cremation Authority: ${validation.hasCremationAuthority ? 'Yes' : 'No'}`, this.margin + 5, this.currentY);
      this.currentY += this.lineHeight;
    }
    
    if (validation.poaType) {
      pdf.text(`POA Type: ${validation.poaType}`, this.margin + 5, this.currentY);
      this.currentY += this.lineHeight;
    }
    
    // Issues
    if (validation.issues && validation.issues.length > 0) {
      pdf.setFont(undefined, 'bold');
      pdf.text('Issues:', this.margin + 5, this.currentY);
      this.currentY += this.lineHeight;
      
      pdf.setFont(undefined, 'normal');
      validation.issues.forEach(issue => {
        const wrappedText = this.wrapText(pdf, `â€¢ ${issue}`, this.pageWidth - this.margin * 2 - 10);
        wrappedText.forEach(line => {
          pdf.text(line, this.margin + 10, this.currentY);
          this.currentY += this.lineHeight;
        });
      });
    }
    
    this.currentY += 5;
  }

  addFooter(pdf) {
    const pageCount = pdf.internal.getNumberOfPages();
    
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setFont(undefined, 'normal');
      pdf.text(
        `Page ${i} of ${pageCount}`,
        this.pageWidth - this.margin - 20,
        this.pageHeight - 10
      );
      pdf.text(
        'This report is generated by Cremation POA Validation App and should be reviewed by qualified legal professionals.',
        this.margin,
        this.pageHeight - 10
      );
    }
  }

  getStatusColor(status) {
    switch (status?.toLowerCase()) {
      case 'pass':
        return { r: 0, g: 128, b: 0 }; // Green
      case 'fail':
        return { r: 220, g: 20, b: 60 }; // Crimson
      case 'warning':
        return { r: 255, g: 140, b: 0 }; // Orange
      default:
        return { r: 0, g: 0, b: 0 }; // Black
    }
  }

  wrapText(pdf, text, maxWidth) {
    const words = text.split(' ');
    const lines = [];
    let currentLine = '';
    
    words.forEach(word => {
      const testLine = currentLine + (currentLine ? ' ' : '') + word;
      const testWidth = pdf.getTextWidth(testLine);
      
      if (testWidth > maxWidth && currentLine) {
        lines.push(currentLine);
        currentLine = word;
      } else {
        currentLine = testLine;
      }
    });
    
    if (currentLine) {
      lines.push(currentLine);
    }
    
    return lines;
  }
}

module.exports = new ReportGenerationService();
